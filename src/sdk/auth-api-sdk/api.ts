/* tslint:disable */
/* eslint-disable */
/**
 * open-api doc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenApiResponse
 */
export interface AccessTokenApiResponse {
    /**
     * 
     * @type {number}
     * @memberof AccessTokenApiResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    gender?: AccessTokenApiResponseGenderEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccessTokenApiResponse
     */
    emailAddresses?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccessTokenApiResponse
     */
    phoneNumbers?: Array<string>;
    /**
     * 
     * @type {Array<DataResponse>}
     * @memberof AccessTokenApiResponse
     */
    data?: Array<DataResponse>;
    /**
     * 
     * @type {boolean}
     * @memberof AccessTokenApiResponse
     */
    passwordUpdateRequired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    refresh_token?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    token_type?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    access_token?: string;
    /**
     * 
     * @type {number}
     * @memberof AccessTokenApiResponse
     */
    secondsTillExpiry?: number;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    expires_at?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AccessTokenApiResponseGenderEnum {
    Male = 'MALE',
    Female = 'FEMALE',
    Other = 'OTHER'
}

/**
 * 
 * @export
 * @interface AccessTokenRequest
 */
export interface AccessTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenRequest
     */
    refresh_token?: string;
}
/**
 * 
 * @export
 * @interface ApiResponseDtoOfAccessTokenApiResponse
 */
export interface ApiResponseDtoOfAccessTokenApiResponse {
    /**
     * 
     * @type {AccessTokenApiResponse}
     * @memberof ApiResponseDtoOfAccessTokenApiResponse
     */
    data?: AccessTokenApiResponse;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseDtoOfAccessTokenApiResponse
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiResponseDtoOfAccessTokenApiResponse
     */
    code?: number;
}
/**
 * 
 * @export
 * @interface ApiResponseDtoOfJwtWebTokenResponse
 */
export interface ApiResponseDtoOfJwtWebTokenResponse {
    /**
     * 
     * @type {JwtWebTokenResponse}
     * @memberof ApiResponseDtoOfJwtWebTokenResponse
     */
    data?: JwtWebTokenResponse;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseDtoOfJwtWebTokenResponse
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiResponseDtoOfJwtWebTokenResponse
     */
    code?: number;
}
/**
 * 
 * @export
 * @interface ApiResponseDtoOfVoid
 */
export interface ApiResponseDtoOfVoid {
    /**
     * 
     * @type {string}
     * @memberof ApiResponseDtoOfVoid
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiResponseDtoOfVoid
     */
    code?: number;
}
/**
 * 
 * @export
 * @interface DataResponse
 */
export interface DataResponse {
    /**
     * 
     * @type {string}
     * @memberof DataResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DataResponse
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface JwtWebTokenResponse
 */
export interface JwtWebTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    kid?: string;
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    use?: string;
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    kty?: string;
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    modulus?: string;
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    exponent?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface PasswordResetApiRequest
 */
export interface PasswordResetApiRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordResetApiRequest
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordResetApiRequest
     */
    invalidateOtherSession?: boolean;
}
/**
 * 
 * @export
 * @interface UserDataApiRequest
 */
export interface UserDataApiRequest {
    /**
     * 
     * @type {string}
     * @memberof UserDataApiRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDataApiRequest
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface UserRegistrationApiRequest
 */
export interface UserRegistrationApiRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    otherNames?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    phoneNumberVerificationCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    emailVerificationCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRegistrationApiRequest
     */
    isPasswordUpdateRequired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    gender?: UserRegistrationApiRequestGenderEnum;
    /**
     * 
     * @type {Array<UserDataApiRequest>}
     * @memberof UserRegistrationApiRequest
     */
    data?: Array<UserDataApiRequest>;
}

/**
    * @export
    * @enum {string}
    */
export enum UserRegistrationApiRequestGenderEnum {
    Male = 'MALE',
    Female = 'FEMALE',
    Other = 'OTHER'
}


/**
 * AccessTokenControllerApi - axios parameter creator
 * @export
 */
export const AccessTokenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AccessTokenRequest} accessTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessToken: async (accessTokenRequest: AccessTokenRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessTokenRequest' is not null or undefined
            assertParamExists('getAccessToken', 'accessTokenRequest', accessTokenRequest)
            const localVarPath = `/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessTokenControllerApi - functional programming interface
 * @export
 */
export const AccessTokenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessTokenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AccessTokenRequest} accessTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessToken(accessTokenRequest: AccessTokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseDtoOfAccessTokenApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessToken(accessTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccessTokenControllerApi - factory interface
 * @export
 */
export const AccessTokenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccessTokenControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AccessTokenRequest} accessTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessToken(accessTokenRequest: AccessTokenRequest, options?: any): AxiosPromise<ApiResponseDtoOfAccessTokenApiResponse> {
            return localVarFp.getAccessToken(accessTokenRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccessToken operation in AccessTokenControllerApi.
 * @export
 * @interface AccessTokenControllerApiGetAccessTokenRequest
 */
export interface AccessTokenControllerApiGetAccessTokenRequest {
    /**
     * 
     * @type {AccessTokenRequest}
     * @memberof AccessTokenControllerApiGetAccessToken
     */
    readonly accessTokenRequest: AccessTokenRequest
}

/**
 * AccessTokenControllerApi - object-oriented interface
 * @export
 * @class AccessTokenControllerApi
 * @extends {BaseAPI}
 */
export class AccessTokenControllerApi extends BaseAPI {
    /**
     * 
     * @param {AccessTokenControllerApiGetAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenControllerApi
     */
    public getAccessToken(requestParameters: AccessTokenControllerApiGetAccessTokenRequest, options?: any) {
        return AccessTokenControllerApiFp(this.configuration).getAccessToken(requestParameters.accessTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IndexControllerApi - axios parameter creator
 * @export
 */
export const IndexControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-docs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndexControllerApi - functional programming interface
 * @export
 */
export const IndexControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndexControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async index(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.index(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IndexControllerApi - factory interface
 * @export
 */
export const IndexControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndexControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocs(options?: any): AxiosPromise<string> {
            return localVarFp.apiDocs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(options?: any): AxiosPromise<string> {
            return localVarFp.index(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndexControllerApi - object-oriented interface
 * @export
 * @class IndexControllerApi
 * @extends {BaseAPI}
 */
export class IndexControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexControllerApi
     */
    public apiDocs(options?: any) {
        return IndexControllerApiFp(this.configuration).apiDocs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexControllerApi
     */
    public index(options?: any) {
        return IndexControllerApiFp(this.configuration).index(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginControllerApi - axios parameter creator
 * @export
 */
export const LoginControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginControllerApi - functional programming interface
 * @export
 */
export const LoginControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseDtoOfAccessTokenApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginControllerApi - factory interface
 * @export
 */
export const LoginControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: any): AxiosPromise<ApiResponseDtoOfAccessTokenApiResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for login operation in LoginControllerApi.
 * @export
 * @interface LoginControllerApiLoginRequest
 */
export interface LoginControllerApiLoginRequest {
    /**
     * 
     * @type {LoginRequest}
     * @memberof LoginControllerApiLogin
     */
    readonly loginRequest: LoginRequest
}

/**
 * LoginControllerApi - object-oriented interface
 * @export
 * @class LoginControllerApi
 * @extends {BaseAPI}
 */
export class LoginControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginControllerApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public login(requestParameters: LoginControllerApiLoginRequest, options?: any) {
        return LoginControllerApiFp(this.configuration).login(requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PasswordResetControllerApi - axios parameter creator
 * @export
 */
export const PasswordResetControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} identifier 
         * @param {string} resetToken 
         * @param {PasswordResetApiRequest} passwordResetApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordWithResetToken: async (identifier: string, resetToken: string, passwordResetApiRequest: PasswordResetApiRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('resetPasswordWithResetToken', 'identifier', identifier)
            // verify required parameter 'resetToken' is not null or undefined
            assertParamExists('resetPasswordWithResetToken', 'resetToken', resetToken)
            // verify required parameter 'passwordResetApiRequest' is not null or undefined
            assertParamExists('resetPasswordWithResetToken', 'passwordResetApiRequest', passwordResetApiRequest)
            const localVarPath = `/password/{identifier}/{resetToken}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"resetToken"}}`, encodeURIComponent(String(resetToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetApiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordResetControllerApi - functional programming interface
 * @export
 */
export const PasswordResetControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordResetControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} identifier 
         * @param {string} resetToken 
         * @param {PasswordResetApiRequest} passwordResetApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordWithResetToken(identifier: string, resetToken: string, passwordResetApiRequest: PasswordResetApiRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseDtoOfAccessTokenApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordWithResetToken(identifier, resetToken, passwordResetApiRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PasswordResetControllerApi - factory interface
 * @export
 */
export const PasswordResetControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordResetControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} identifier 
         * @param {string} resetToken 
         * @param {PasswordResetApiRequest} passwordResetApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordWithResetToken(identifier: string, resetToken: string, passwordResetApiRequest: PasswordResetApiRequest, options?: any): AxiosPromise<ApiResponseDtoOfAccessTokenApiResponse> {
            return localVarFp.resetPasswordWithResetToken(identifier, resetToken, passwordResetApiRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for resetPasswordWithResetToken operation in PasswordResetControllerApi.
 * @export
 * @interface PasswordResetControllerApiResetPasswordWithResetTokenRequest
 */
export interface PasswordResetControllerApiResetPasswordWithResetTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordResetControllerApiResetPasswordWithResetToken
     */
    readonly identifier: string

    /**
     * 
     * @type {string}
     * @memberof PasswordResetControllerApiResetPasswordWithResetToken
     */
    readonly resetToken: string

    /**
     * 
     * @type {PasswordResetApiRequest}
     * @memberof PasswordResetControllerApiResetPasswordWithResetToken
     */
    readonly passwordResetApiRequest: PasswordResetApiRequest
}

/**
 * PasswordResetControllerApi - object-oriented interface
 * @export
 * @class PasswordResetControllerApi
 * @extends {BaseAPI}
 */
export class PasswordResetControllerApi extends BaseAPI {
    /**
     * 
     * @param {PasswordResetControllerApiResetPasswordWithResetTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordResetControllerApi
     */
    public resetPasswordWithResetToken(requestParameters: PasswordResetControllerApiResetPasswordWithResetTokenRequest, options?: any) {
        return PasswordResetControllerApiFp(this.configuration).resetPasswordWithResetToken(requestParameters.identifier, requestParameters.resetToken, requestParameters.passwordResetApiRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PasswordResetRequestControllerApi - axios parameter creator
 * @export
 */
export const PasswordResetRequestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordResetWithEmail: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('requestPasswordResetWithEmail', 'email', email)
            const localVarPath = `/password-resets/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordResetRequestControllerApi - functional programming interface
 * @export
 */
export const PasswordResetRequestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordResetRequestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestPasswordResetWithEmail(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseDtoOfVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestPasswordResetWithEmail(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PasswordResetRequestControllerApi - factory interface
 * @export
 */
export const PasswordResetRequestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordResetRequestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordResetWithEmail(email: string, options?: any): AxiosPromise<ApiResponseDtoOfVoid> {
            return localVarFp.requestPasswordResetWithEmail(email, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for requestPasswordResetWithEmail operation in PasswordResetRequestControllerApi.
 * @export
 * @interface PasswordResetRequestControllerApiRequestPasswordResetWithEmailRequest
 */
export interface PasswordResetRequestControllerApiRequestPasswordResetWithEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordResetRequestControllerApiRequestPasswordResetWithEmail
     */
    readonly email: string
}

/**
 * PasswordResetRequestControllerApi - object-oriented interface
 * @export
 * @class PasswordResetRequestControllerApi
 * @extends {BaseAPI}
 */
export class PasswordResetRequestControllerApi extends BaseAPI {
    /**
     * 
     * @param {PasswordResetRequestControllerApiRequestPasswordResetWithEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordResetRequestControllerApi
     */
    public requestPasswordResetWithEmail(requestParameters: PasswordResetRequestControllerApiRequestPasswordResetWithEmailRequest, options?: any) {
        return PasswordResetRequestControllerApiFp(this.configuration).requestPasswordResetWithEmail(requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PortalUserIdentifierVerificationControllerApi - axios parameter creator
 * @export
 */
export const PortalUserIdentifierVerificationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestEmailVerificationCode: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('requestEmailVerificationCode', 'email', email)
            const localVarPath = `/user-emails/{email}/verification-code`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortalUserIdentifierVerificationControllerApi - functional programming interface
 * @export
 */
export const PortalUserIdentifierVerificationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortalUserIdentifierVerificationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestEmailVerificationCode(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseDtoOfVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestEmailVerificationCode(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PortalUserIdentifierVerificationControllerApi - factory interface
 * @export
 */
export const PortalUserIdentifierVerificationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortalUserIdentifierVerificationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestEmailVerificationCode(email: string, options?: any): AxiosPromise<ApiResponseDtoOfVoid> {
            return localVarFp.requestEmailVerificationCode(email, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for requestEmailVerificationCode operation in PortalUserIdentifierVerificationControllerApi.
 * @export
 * @interface PortalUserIdentifierVerificationControllerApiRequestEmailVerificationCodeRequest
 */
export interface PortalUserIdentifierVerificationControllerApiRequestEmailVerificationCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof PortalUserIdentifierVerificationControllerApiRequestEmailVerificationCode
     */
    readonly email: string
}

/**
 * PortalUserIdentifierVerificationControllerApi - object-oriented interface
 * @export
 * @class PortalUserIdentifierVerificationControllerApi
 * @extends {BaseAPI}
 */
export class PortalUserIdentifierVerificationControllerApi extends BaseAPI {
    /**
     * 
     * @param {PortalUserIdentifierVerificationControllerApiRequestEmailVerificationCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortalUserIdentifierVerificationControllerApi
     */
    public requestEmailVerificationCode(requestParameters: PortalUserIdentifierVerificationControllerApiRequestEmailVerificationCodeRequest, options?: any) {
        return PortalUserIdentifierVerificationControllerApiFp(this.configuration).requestEmailVerificationCode(requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PortalUserRegistrationControllerApi - axios parameter creator
 * @export
 */
export const PortalUserRegistrationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserRegistrationApiRequest} userRegistrationApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (userRegistrationApiRequest: UserRegistrationApiRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegistrationApiRequest' is not null or undefined
            assertParamExists('registerUser', 'userRegistrationApiRequest', userRegistrationApiRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegistrationApiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortalUserRegistrationControllerApi - functional programming interface
 * @export
 */
export const PortalUserRegistrationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortalUserRegistrationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserRegistrationApiRequest} userRegistrationApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(userRegistrationApiRequest: UserRegistrationApiRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseDtoOfAccessTokenApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(userRegistrationApiRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PortalUserRegistrationControllerApi - factory interface
 * @export
 */
export const PortalUserRegistrationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortalUserRegistrationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {UserRegistrationApiRequest} userRegistrationApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(userRegistrationApiRequest: UserRegistrationApiRequest, options?: any): AxiosPromise<ApiResponseDtoOfAccessTokenApiResponse> {
            return localVarFp.registerUser(userRegistrationApiRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for registerUser operation in PortalUserRegistrationControllerApi.
 * @export
 * @interface PortalUserRegistrationControllerApiRegisterUserRequest
 */
export interface PortalUserRegistrationControllerApiRegisterUserRequest {
    /**
     * 
     * @type {UserRegistrationApiRequest}
     * @memberof PortalUserRegistrationControllerApiRegisterUser
     */
    readonly userRegistrationApiRequest: UserRegistrationApiRequest
}

/**
 * PortalUserRegistrationControllerApi - object-oriented interface
 * @export
 * @class PortalUserRegistrationControllerApi
 * @extends {BaseAPI}
 */
export class PortalUserRegistrationControllerApi extends BaseAPI {
    /**
     * 
     * @param {PortalUserRegistrationControllerApiRegisterUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortalUserRegistrationControllerApi
     */
    public registerUser(requestParameters: PortalUserRegistrationControllerApiRegisterUserRequest, options?: any) {
        return PortalUserRegistrationControllerApiFp(this.configuration).registerUser(requestParameters.userRegistrationApiRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SignatureKeyControllerApi - axios parameter creator
 * @export
 */
export const SignatureKeyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKey: async (kid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'kid' is not null or undefined
            assertParamExists('getJsonWebKey', 'kid', kid)
            const localVarPath = `/key/{kid}`
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignatureKeyControllerApi - functional programming interface
 * @export
 */
export const SignatureKeyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignatureKeyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJsonWebKey(kid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseDtoOfJwtWebTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJsonWebKey(kid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignatureKeyControllerApi - factory interface
 * @export
 */
export const SignatureKeyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignatureKeyControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKey(kid: string, options?: any): AxiosPromise<ApiResponseDtoOfJwtWebTokenResponse> {
            return localVarFp.getJsonWebKey(kid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getJsonWebKey operation in SignatureKeyControllerApi.
 * @export
 * @interface SignatureKeyControllerApiGetJsonWebKeyRequest
 */
export interface SignatureKeyControllerApiGetJsonWebKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof SignatureKeyControllerApiGetJsonWebKey
     */
    readonly kid: string
}

/**
 * SignatureKeyControllerApi - object-oriented interface
 * @export
 * @class SignatureKeyControllerApi
 * @extends {BaseAPI}
 */
export class SignatureKeyControllerApi extends BaseAPI {
    /**
     * 
     * @param {SignatureKeyControllerApiGetJsonWebKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureKeyControllerApi
     */
    public getJsonWebKey(requestParameters: SignatureKeyControllerApiGetJsonWebKeyRequest, options?: any) {
        return SignatureKeyControllerApiFp(this.configuration).getJsonWebKey(requestParameters.kid, options).then((request) => request(this.axios, this.basePath));
    }
}


