// tslint:disable
/**
 * Tss Authentication Service
 * Api ofr Tss authentication service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenApiResponse
 */
export interface AccessTokenApiResponse {
    /**
     * 
     * @type {number}
     * @memberof AccessTokenApiResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    gender: AccessTokenApiResponseGenderEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccessTokenApiResponse
     */
    emailAddresses: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccessTokenApiResponse
     */
    phoneNumbers: Array<string>;
    /**
     * 
     * @type {Array<DataResponse>}
     * @memberof AccessTokenApiResponse
     */
    data: Array<DataResponse>;
    /**
     * 
     * @type {boolean}
     * @memberof AccessTokenApiResponse
     */
    passwordUpdateRequired: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    token_type: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    access_token: string;
    /**
     * 
     * @type {number}
     * @memberof AccessTokenApiResponse
     */
    secondsTillExpiry: number;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenApiResponse
     */
    expires_at: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AccessTokenApiResponseGenderEnum {
    MALE = 'MALE',
    FEMALE = 'FEMALE',
    OTHER = 'OTHER'
}

/**
 * 
 * @export
 * @interface AccessTokenRequest
 */
export interface AccessTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenRequest
     */
    refresh_token: string;
}
/**
 * 
 * @export
 * @interface DataResponse
 */
export interface DataResponse {
    /**
     * 
     * @type {string}
     * @memberof DataResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DataResponse
     */
    value: string;
}
/**
 * 
 * @export
 * @interface JwtWebTokenResponse
 */
export interface JwtWebTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    kid: string;
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    use: string;
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    kty: string;
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    modulus: string;
    /**
     * 
     * @type {string}
     * @memberof JwtWebTokenResponse
     */
    exponent: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    identifier: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface PasswordResetApiRequest
 */
export interface PasswordResetApiRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordResetApiRequest
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordResetApiRequest
     */
    invalidateOtherSession: boolean;
}
/**
 * 
 * @export
 * @interface UserDataApiRequest
 */
export interface UserDataApiRequest {
    /**
     * 
     * @type {string}
     * @memberof UserDataApiRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserDataApiRequest
     */
    value: string;
}
/**
 * 
 * @export
 * @interface UserRegistrationApiRequest
 */
export interface UserRegistrationApiRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    otherNames?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    phoneNumberVerificationCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    emailVerificationCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRegistrationApiRequest
     */
    isPasswordUpdateRequired: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationApiRequest
     */
    gender?: UserRegistrationApiRequestGenderEnum;
    /**
     * 
     * @type {Array<UserDataApiRequest>}
     * @memberof UserRegistrationApiRequest
     */
    data?: Array<UserDataApiRequest>;
}

/**
    * @export
    * @enum {string}
    */
export enum UserRegistrationApiRequestGenderEnum {
    MALE = 'MALE',
    FEMALE = 'FEMALE',
    OTHER = 'OTHER'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AccessTokenRequest} accessTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessTokenControllerGetAccessToken: async (accessTokenRequest: AccessTokenRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessTokenRequest' is not null or undefined
            if (accessTokenRequest === null || accessTokenRequest === undefined) {
                throw new RequiredError('accessTokenRequest','Required parameter accessTokenRequest was null or undefined when calling accessTokenControllerGetAccessToken.');
            }
            const localVarPath = `/api/v1/oauth2/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof accessTokenRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(accessTokenRequest !== undefined ? accessTokenRequest : {}) : (accessTokenRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthenticationControllerLogin: async (loginRequest: LoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            if (loginRequest === null || loginRequest === undefined) {
                throw new RequiredError('loginRequest','Required parameter loginRequest was null or undefined when calling loginAuthenticationControllerLogin.');
            }
            const localVarPath = `/api/v1/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identifier 
         * @param {string} resetToken 
         * @param {PasswordResetApiRequest} passwordResetApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordResetControllerResetPasswordWithResetToken: async (identifier: string, resetToken: string, passwordResetApiRequest: PasswordResetApiRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling passwordResetControllerResetPasswordWithResetToken.');
            }
            // verify required parameter 'resetToken' is not null or undefined
            if (resetToken === null || resetToken === undefined) {
                throw new RequiredError('resetToken','Required parameter resetToken was null or undefined when calling passwordResetControllerResetPasswordWithResetToken.');
            }
            // verify required parameter 'passwordResetApiRequest' is not null or undefined
            if (passwordResetApiRequest === null || passwordResetApiRequest === undefined) {
                throw new RequiredError('passwordResetApiRequest','Required parameter passwordResetApiRequest was null or undefined when calling passwordResetControllerResetPasswordWithResetToken.');
            }
            const localVarPath = `/api/v1/password/{identifier}/{resetToken}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"resetToken"}}`, encodeURIComponent(String(resetToken)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof passwordResetApiRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(passwordResetApiRequest !== undefined ? passwordResetApiRequest : {}) : (passwordResetApiRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordResetRequestControllerRequestPasswordResetWithEmail: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling passwordResetRequestControllerRequestPasswordResetWithEmail.');
            }
            const localVarPath = `/api/v1/password-resets/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portalUserIdentifierVerificationControllerRequestEmailVerificationCode: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling portalUserIdentifierVerificationControllerRequestEmailVerificationCode.');
            }
            const localVarPath = `/api/v1/user-emails/{email}/verification-code`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRegistrationApiRequest} userRegistrationApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portalUserRegistrationControllerRegisterUser: async (userRegistrationApiRequest: UserRegistrationApiRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegistrationApiRequest' is not null or undefined
            if (userRegistrationApiRequest === null || userRegistrationApiRequest === undefined) {
                throw new RequiredError('userRegistrationApiRequest','Required parameter userRegistrationApiRequest was null or undefined when calling portalUserRegistrationControllerRegisterUser.');
            }
            const localVarPath = `/api/v1/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userRegistrationApiRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userRegistrationApiRequest !== undefined ? userRegistrationApiRequest : {}) : (userRegistrationApiRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureKeyControllerGetJsonWebKey: async (kid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'kid' is not null or undefined
            if (kid === null || kid === undefined) {
                throw new RequiredError('kid','Required parameter kid was null or undefined when calling signatureKeyControllerGetJsonWebKey.');
            }
            const localVarPath = `/api/v1/key/{kid}`
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AccessTokenRequest} accessTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTokenControllerGetAccessToken(accessTokenRequest: AccessTokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenApiResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).accessTokenControllerGetAccessToken(accessTokenRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAuthenticationControllerLogin(loginRequest: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenApiResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).loginAuthenticationControllerLogin(loginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} identifier 
         * @param {string} resetToken 
         * @param {PasswordResetApiRequest} passwordResetApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordResetControllerResetPasswordWithResetToken(identifier: string, resetToken: string, passwordResetApiRequest: PasswordResetApiRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenApiResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).passwordResetControllerResetPasswordWithResetToken(identifier, resetToken, passwordResetApiRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordResetRequestControllerRequestPasswordResetWithEmail(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).passwordResetRequestControllerRequestPasswordResetWithEmail(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portalUserIdentifierVerificationControllerRequestEmailVerificationCode(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).portalUserIdentifierVerificationControllerRequestEmailVerificationCode(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UserRegistrationApiRequest} userRegistrationApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portalUserRegistrationControllerRegisterUser(userRegistrationApiRequest: UserRegistrationApiRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenApiResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).portalUserRegistrationControllerRegisterUser(userRegistrationApiRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signatureKeyControllerGetJsonWebKey(kid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtWebTokenResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).signatureKeyControllerGetJsonWebKey(kid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {AccessTokenRequest} accessTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessTokenControllerGetAccessToken(accessTokenRequest: AccessTokenRequest, options?: any): AxiosPromise<AccessTokenApiResponse> {
            return DefaultApiFp(configuration).accessTokenControllerGetAccessToken(accessTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthenticationControllerLogin(loginRequest: LoginRequest, options?: any): AxiosPromise<AccessTokenApiResponse> {
            return DefaultApiFp(configuration).loginAuthenticationControllerLogin(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} identifier 
         * @param {string} resetToken 
         * @param {PasswordResetApiRequest} passwordResetApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordResetControllerResetPasswordWithResetToken(identifier: string, resetToken: string, passwordResetApiRequest: PasswordResetApiRequest, options?: any): AxiosPromise<AccessTokenApiResponse> {
            return DefaultApiFp(configuration).passwordResetControllerResetPasswordWithResetToken(identifier, resetToken, passwordResetApiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordResetRequestControllerRequestPasswordResetWithEmail(email: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).passwordResetRequestControllerRequestPasswordResetWithEmail(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portalUserIdentifierVerificationControllerRequestEmailVerificationCode(email: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).portalUserIdentifierVerificationControllerRequestEmailVerificationCode(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRegistrationApiRequest} userRegistrationApiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portalUserRegistrationControllerRegisterUser(userRegistrationApiRequest: UserRegistrationApiRequest, options?: any): AxiosPromise<AccessTokenApiResponse> {
            return DefaultApiFp(configuration).portalUserRegistrationControllerRegisterUser(userRegistrationApiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signatureKeyControllerGetJsonWebKey(kid: string, options?: any): AxiosPromise<JwtWebTokenResponse> {
            return DefaultApiFp(configuration).signatureKeyControllerGetJsonWebKey(kid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {AccessTokenRequest} accessTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessTokenControllerGetAccessToken(accessTokenRequest: AccessTokenRequest, options?: any) {
        return DefaultApiFp(this.configuration).accessTokenControllerGetAccessToken(accessTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginAuthenticationControllerLogin(loginRequest: LoginRequest, options?: any) {
        return DefaultApiFp(this.configuration).loginAuthenticationControllerLogin(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} identifier 
     * @param {string} resetToken 
     * @param {PasswordResetApiRequest} passwordResetApiRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public passwordResetControllerResetPasswordWithResetToken(identifier: string, resetToken: string, passwordResetApiRequest: PasswordResetApiRequest, options?: any) {
        return DefaultApiFp(this.configuration).passwordResetControllerResetPasswordWithResetToken(identifier, resetToken, passwordResetApiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public passwordResetRequestControllerRequestPasswordResetWithEmail(email: string, options?: any) {
        return DefaultApiFp(this.configuration).passwordResetRequestControllerRequestPasswordResetWithEmail(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public portalUserIdentifierVerificationControllerRequestEmailVerificationCode(email: string, options?: any) {
        return DefaultApiFp(this.configuration).portalUserIdentifierVerificationControllerRequestEmailVerificationCode(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRegistrationApiRequest} userRegistrationApiRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public portalUserRegistrationControllerRegisterUser(userRegistrationApiRequest: UserRegistrationApiRequest, options?: any) {
        return DefaultApiFp(this.configuration).portalUserRegistrationControllerRegisterUser(userRegistrationApiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} kid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signatureKeyControllerGetJsonWebKey(kid: string, options?: any) {
        return DefaultApiFp(this.configuration).signatureKeyControllerGetJsonWebKey(kid, options).then((request) => request(this.axios, this.basePath));
    }

}


